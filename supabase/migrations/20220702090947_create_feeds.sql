-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

ALTER FUNCTION public.handle_new_user()
    SET search_path=public;

CREATE TABLE IF NOT EXISTS public.feeds
(
    id uuid NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    url text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    updated_at timestamp with time zone,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    created_by uuid,
    CONSTRAINT feeds_pkey PRIMARY KEY (id),
    CONSTRAINT feeds_url_key UNIQUE (url),
    CONSTRAINT feeds_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.feeds
    OWNER to postgres;

GRANT ALL ON TABLE public.feeds TO anon;

GRANT ALL ON TABLE public.feeds TO authenticated;

GRANT ALL ON TABLE public.feeds TO postgres;

GRANT ALL ON TABLE public.feeds TO service_role;

CREATE TRIGGER handle_updated_at_feeds
    BEFORE UPDATE 
    ON public.feeds
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');

REVOKE ALL ON TABLE public.users FROM anon;
REVOKE ALL ON TABLE public.users FROM postgres;
REVOKE ALL ON TABLE public.users FROM service_role;
GRANT ALL ON TABLE public.users TO anon;

GRANT ALL ON TABLE public.users TO service_role;

GRANT ALL ON TABLE public.users TO postgres;
CREATE TRIGGER handle_updated_at_users
    BEFORE UPDATE 
    ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');
